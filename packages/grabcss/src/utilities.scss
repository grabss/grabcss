@use './mediaquery' as mediaquery;
@use './mixins' as mixins;
@use './variables' as variables;
@use 'sass:list';

// Playground examples:
// .opacity-0    { opacity: 0; }
// .opacity-25   { opacity: 0.25; }
// .opacity-50   { opacity: 0.5; }
// .opacity-75   { opacity: 0.75; }
// .opacity-100  { opacity: 1; }

// Define utility configurations for cleaner generation
$utility-configs: (
  'text': (
    variables.$colors,
    'color'
  ),
  'bg': (
    variables.$colors,
    'background-color'
  ),
  'fs': (
    variables.$font-sizes,
    'font-size'
  ),
  'fw': (
    variables.$font-weights,
    'font-weight'
  ),
  'lh': (
    variables.$line-heights,
    'line-height'
  ),
  'v': (
    variables.$visibilities,
    'visibility'
  ),
  'd': (
    variables.$displays,
    'display'
  ),
  'ps': (
    variables.$positions,
    'position'
  ),
  'g': (
    variables.$spaces,
    'gap'
  ),
  'rg': (
    variables.$spaces,
    'row-gap'
  ),
  'cg': (
    variables.$spaces,
    'column-gap'
  ),
  'w': (
    variables.$sizes,
    'width'
  ),
  'h': (
    variables.$sizes,
    'height'
  ),
  'ws': (
    variables.$white-spaces,
    'white-space'
  ),
  'wb': (
    variables.$word-breaks,
    'word-break'
  ),
  'flex-direction': (
    variables.$flex-directions,
    'flex-direction'
  ),
  'flex-wrap': (
    variables.$flex-wraps,
    'flex-wrap'
  ),
  'justify-content': (
    variables.$justify-content-positions,
    'justify-content'
  ),
  'align-items': (
    variables.$align-items-positions,
    'align-items'
  ),
  'grid-template-cols': (
    variables.$grid-template-columns,
    'grid-template-columns'
  ),
  'grid-template-rows': (
    variables.$grid-template-rows,
    'grid-template-rows'
  ),
  'grid-col': (
    variables.$grid-columns,
    'grid-column'
  ),
  'grid-row': (
    variables.$grid-rows,
    'grid-row'
  ),
  'place-content': (
    variables.$place-content,
    'place-content'
  ),
  'place-items': (
    variables.$place-items,
    'place-items'
  ),
  'place-self': (
    variables.$place-self,
    'place-self'
  ),
  'op': (
    variables.$opacities,
    'opacity'
  ),
  'border': (
    variables.$border-widths,
    'border-width'
  ),
  'rounded': (
    variables.$border-radii,
    'border-radius'
  )
);

// Generate base utilities
@each $prefix, $config in $utility-configs {
  @include mixins.generate-classes(
    list.nth($config, 1),
    $prefix,
    list.nth($config, 2)
  );
}

// Generate spacing utilities (margin & padding)
@include mixins.generate-space-classes('m', 'margin');
@include mixins.generate-space-classes('p', 'padding');

// Generate text-align utilities with special prefix
@each $key, $value in variables.$text-directions {
  .text-#{$key} {
    text-align: $value;
  }
}

// Fixed utilities
.flex-1 {
  flex: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

// Border style utilities
.border {
  border-style: solid;
  border-color: var(--color-border);
}

// Generate breakpoint utilities
@each $prefix, $config in $utility-configs {
  @include mixins.generate-breakpoint-classes(
    list.nth($config, 1),
    $prefix,
    list.nth($config, 2)
  );
}

// Generate breakpoint spacing utilities
@include mixins.generate-breakpoint-space-classes('m', 'margin');
@include mixins.generate-breakpoint-space-classes('p', 'padding');

// Generate breakpoint text-align utilities
@each $breakpoint, $_ in mediaquery.$breakpoints {
  @each $key, $value in variables.$text-directions {
    .#{$breakpoint}\:text-#{$key} {
      @include mediaquery.mq($breakpoint) {
        text-align: $value;
      }
    }
  }
}

// Breakpoint fixed utilities
@each $breakpoint, $_ in mediaquery.$breakpoints {
  .#{$breakpoint}\:flex-1 {
    @include mediaquery.mq($breakpoint) {
      flex: 1;
    }
  }

  .#{$breakpoint}\:flex-shrink-0 {
    @include mediaquery.mq($breakpoint) {
      flex-shrink: 0;
    }
  }

  .#{$breakpoint}\:border {
    @include mediaquery.mq($breakpoint) {
      border-style: solid;
      border-color: var(--color-border);
    }
  }
}
