@use './mediaquery' as mediaquery;
@use './mixins' as mixins;
@use './variables' as variables;
@use 'sass:list';

// Define utility configurations for cleaner generation
$utility-configs: (
  // Colors
  'text': (
    variables.$colors,
    'color'
  ),
  'bg': (
    variables.$colors,
    'background-color'
  ),
  // Typography
  'fs': (
    variables.$font-sizes,
    'font-size'
  ),
  'fw': (
    variables.$font-weights,
    'font-weight'
  ),
  'lh': (
    variables.$line-heights,
    'line-height'
  ),
  'ws': (
    variables.$white-spaces,
    'white-space'
  ),
  'wb': (
    variables.$word-breaks,
    'word-break'
  ),
  // Layout
  'd': (
    variables.$displays,
    'display'
  ),
  'ps': (
    variables.$positions,
    'position'
  ),
  'v': (
    variables.$visibilities,
    'visibility'
  ),
  // Sizing
  'w': (
    variables.$sizes,
    'width'
  ),
  'h': (
    variables.$sizes,
    'height'
  ),
  // Spacing
  'g': (
    variables.$spaces,
    'gap'
  ),
  'rg': (
    variables.$spaces,
    'row-gap'
  ),
  'cg': (
    variables.$spaces,
    'column-gap'
  ),
  // Flexbox
  'flex-direction': (
    variables.$flex-directions,
    'flex-direction'
  ),
  'justify-content': (
    variables.$justify-content-positions,
    'justify-content'
  ),
  'align-items': (
    variables.$align-items-positions,
    'align-items'
  ),
  // Grid
  'grid-template-cols': (
    variables.$grid-template-columns,
    'grid-template-columns'
  ),
  'grid-template-rows': (
    variables.$grid-template-rows,
    'grid-template-rows'
  ),
  'grid-col': (
    variables.$grid-columns,
    'grid-column'
  ),
  'grid-row': (
    variables.$grid-rows,
    'grid-row'
  ),
  'place-content': (
    variables.$place-content,
    'place-content'
  ),
  'place-items': (
    variables.$place-items,
    'place-items'
  ),
  'place-self': (
    variables.$place-self,
    'place-self'
  ),
  // Visual effects
  'op': (
    variables.$opacities,
    'opacity'
  ),
  'rounded': (
    variables.$border-radius,
    'border-radius'
  )
);

// Generate base utilities
@each $prefix, $config in $utility-configs {
  @include mixins.generate-classes(
    list.nth($config, 1),
    $prefix,
    list.nth($config, 2)
  );
}

// Generate spacing utilities (margin & padding)
@include mixins.generate-space-classes('m', 'margin');
@include mixins.generate-space-classes('p', 'padding');

// Generate text-align utilities with special prefix
@each $key, $value in variables.$text-directions {
  .text-#{$key} {
    text-align: $value;
  }
}

// Generate flex-wrap utilities with better naming
@each $key, $value in variables.$flex-wraps {
  @if $key == 'nowrap' {
    .flex-nowrap {
      flex-wrap: $value;
    }
  } @else if $key == 'wrap' {
    .flex-wrap {
      flex-wrap: $value;
    }
  } @else if $key == 'wrap-reverse' {
    .flex-wrap-reverse {
      flex-wrap: $value;
    }
  }
}

// Generate border utilities
@each $key, $value in variables.$border-widths {
  @if $key == 'default' {
    .border {
      border-width: $value;
      border-style: solid;
      border-color: var(--color-border);
    }
  } @else {
    .border-#{$key} {
      border-width: $value;
      border-style: solid;
      border-color: var(--color-border);
    }
  }
}

// Fixed utilities
.flex-1 {
  flex: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

// Generate breakpoint utilities
@each $prefix, $config in $utility-configs {
  @include mixins.generate-breakpoint-classes(
    list.nth($config, 1),
    $prefix,
    list.nth($config, 2)
  );
}

// Generate breakpoint spacing utilities
@include mixins.generate-breakpoint-space-classes('m', 'margin');
@include mixins.generate-breakpoint-space-classes('p', 'padding');

// Generate breakpoint text-align utilities
@each $breakpoint, $_ in mediaquery.$breakpoints {
  @each $key, $value in variables.$text-directions {
    .#{$breakpoint}\:text-#{$key} {
      @include mediaquery.mq($breakpoint) {
        text-align: $value;
      }
    }
  }
}

// Generate breakpoint flex-wrap utilities
@each $breakpoint, $_ in mediaquery.$breakpoints {
  @each $key, $value in variables.$flex-wraps {
    @if $key == 'nowrap' {
      .#{$breakpoint}\:flex-nowrap {
        @include mediaquery.mq($breakpoint) {
          flex-wrap: $value;
        }
      }
    } @else if $key == 'wrap' {
      .#{$breakpoint}\:flex-wrap {
        @include mediaquery.mq($breakpoint) {
          flex-wrap: $value;
        }
      }
    } @else if $key == 'wrap-reverse' {
      .#{$breakpoint}\:flex-wrap-reverse {
        @include mediaquery.mq($breakpoint) {
          flex-wrap: $value;
        }
      }
    }
  }
}

// Generate breakpoint border utilities
@each $breakpoint, $_ in mediaquery.$breakpoints {
  @each $key, $value in variables.$border-widths {
    @if $key == 'default' {
      .#{$breakpoint}\:border {
        @include mediaquery.mq($breakpoint) {
          border-width: $value;
          border-style: solid;
          border-color: var(--color-border);
        }
      }
    } @else {
      .#{$breakpoint}\:border-#{$key} {
        @include mediaquery.mq($breakpoint) {
          border-width: $value;
          border-style: solid;
          border-color: var(--color-border);
        }
      }
    }
  }
}

// Breakpoint fixed utilities
@each $breakpoint, $_ in mediaquery.$breakpoints {
  .#{$breakpoint}\:flex-1 {
    @include mediaquery.mq($breakpoint) {
      flex: 1;
    }
  }

  .#{$breakpoint}\:flex-shrink-0 {
    @include mediaquery.mq($breakpoint) {
      flex-shrink: 0;
    }
  }
}
